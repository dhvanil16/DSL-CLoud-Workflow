/*
 * generated by Xtext 2.32.0
 */
package cloudautomation.ide.contentassist.antlr;

import cloudautomation.ide.contentassist.antlr.internal.InternalAirflowParser;
import cloudautomation.services.AirflowGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AirflowParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AirflowGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AirflowGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPriorityAccess().getAlternatives(), "rule__Priority__Alternatives");
			builder.put(grammarAccess.getTaskTypeAccess().getAlternatives(), "rule__TaskType__Alternatives");
			builder.put(grammarAccess.getWorkflowAccess().getGroup(), "rule__Workflow__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getModelAccess().getWorkflowsAssignment(), "rule__Model__WorkflowsAssignment");
			builder.put(grammarAccess.getWorkflowAccess().getNameAssignment_1(), "rule__Workflow__NameAssignment_1");
			builder.put(grammarAccess.getWorkflowAccess().getDescriptionAssignment_3(), "rule__Workflow__DescriptionAssignment_3");
			builder.put(grammarAccess.getWorkflowAccess().getTasksAssignment_4(), "rule__Workflow__TasksAssignment_4");
			builder.put(grammarAccess.getWorkflowAccess().getDependenciesAssignment_5(), "rule__Workflow__DependenciesAssignment_5");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getDescriptionAssignment_3(), "rule__Task__DescriptionAssignment_3");
			builder.put(grammarAccess.getTaskAccess().getPriorityAssignment_4(), "rule__Task__PriorityAssignment_4");
			builder.put(grammarAccess.getTaskAccess().getTypeAssignment_5(), "rule__Task__TypeAssignment_5");
			builder.put(grammarAccess.getDependencyAccess().getTaskAssignment_1(), "rule__Dependency__TaskAssignment_1");
			builder.put(grammarAccess.getDependencyAccess().getTaskIdAssignment_3(), "rule__Dependency__TaskIdAssignment_3");
			builder.put(grammarAccess.getPriorityAccess().getLOWAssignment_0(), "rule__Priority__LOWAssignment_0");
			builder.put(grammarAccess.getPriorityAccess().getMEDIUMAssignment_1(), "rule__Priority__MEDIUMAssignment_1");
			builder.put(grammarAccess.getPriorityAccess().getHIGHAssignment_2(), "rule__Priority__HIGHAssignment_2");
			builder.put(grammarAccess.getTaskTypeAccess().getSIMPLEAssignment_0(), "rule__TaskType__SIMPLEAssignment_0");
			builder.put(grammarAccess.getTaskTypeAccess().getCOMPOUNDAssignment_1(), "rule__TaskType__COMPOUNDAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AirflowGrammarAccess grammarAccess;

	@Override
	protected InternalAirflowParser createParser() {
		InternalAirflowParser result = new InternalAirflowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AirflowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AirflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
