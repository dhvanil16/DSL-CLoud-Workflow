/*
 * generated by Xtext 2.32.0
 */
grammar InternalAirflow;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package cloudautomation.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package cloudautomation.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import cloudautomation.services.AirflowGrammarAccess;

}
@parser::members {
	private AirflowGrammarAccess grammarAccess;

	public void setGrammarAccess(AirflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getWorkflowsAssignment()); }
		(rule__Model__WorkflowsAssignment)*
		{ after(grammarAccess.getModelAccess().getWorkflowsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWorkflow
entryRuleWorkflow
:
{ before(grammarAccess.getWorkflowRule()); }
	 ruleWorkflow
{ after(grammarAccess.getWorkflowRule()); } 
	 EOF 
;

// Rule Workflow
ruleWorkflow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorkflowAccess().getGroup()); }
		(rule__Workflow__Group__0)
		{ after(grammarAccess.getWorkflowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTask
entryRuleTask
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskAccess().getGroup()); }
		(rule__Task__Group__0)
		{ after(grammarAccess.getTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDependency
entryRuleDependency
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDependencyAccess().getGroup()); }
		(rule__Dependency__Group__0)
		{ after(grammarAccess.getDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePriority
entryRulePriority
:
{ before(grammarAccess.getPriorityRule()); }
	 rulePriority
{ after(grammarAccess.getPriorityRule()); } 
	 EOF 
;

// Rule Priority
rulePriority 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPriorityAccess().getAlternatives()); }
		(rule__Priority__Alternatives)
		{ after(grammarAccess.getPriorityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTaskType
entryRuleTaskType
:
{ before(grammarAccess.getTaskTypeRule()); }
	 ruleTaskType
{ after(grammarAccess.getTaskTypeRule()); } 
	 EOF 
;

// Rule TaskType
ruleTaskType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskTypeAccess().getAlternatives()); }
		(rule__TaskType__Alternatives)
		{ after(grammarAccess.getTaskTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityAccess().getLOWAssignment_0()); }
		(rule__Priority__LOWAssignment_0)
		{ after(grammarAccess.getPriorityAccess().getLOWAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPriorityAccess().getMEDIUMAssignment_1()); }
		(rule__Priority__MEDIUMAssignment_1)
		{ after(grammarAccess.getPriorityAccess().getMEDIUMAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPriorityAccess().getHIGHAssignment_2()); }
		(rule__Priority__HIGHAssignment_2)
		{ after(grammarAccess.getPriorityAccess().getHIGHAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskTypeAccess().getSIMPLEAssignment_0()); }
		(rule__TaskType__SIMPLEAssignment_0)
		{ after(grammarAccess.getTaskTypeAccess().getSIMPLEAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTaskTypeAccess().getCOMPOUNDAssignment_1()); }
		(rule__TaskType__COMPOUNDAssignment_1)
		{ after(grammarAccess.getTaskTypeAccess().getCOMPOUNDAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__0__Impl
	rule__Workflow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getWorkflowKeyword_0()); }
	'Workflow'
	{ after(grammarAccess.getWorkflowAccess().getWorkflowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__1__Impl
	rule__Workflow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getNameAssignment_1()); }
	(rule__Workflow__NameAssignment_1)
	{ after(grammarAccess.getWorkflowAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__2__Impl
	rule__Workflow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__3__Impl
	rule__Workflow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getDescriptionAssignment_3()); }
	(rule__Workflow__DescriptionAssignment_3)
	{ after(grammarAccess.getWorkflowAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__4__Impl
	rule__Workflow__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getTasksAssignment_4()); }
	(rule__Workflow__TasksAssignment_4)*
	{ after(grammarAccess.getWorkflowAccess().getTasksAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__5__Impl
	rule__Workflow__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getDependenciesAssignment_5()); }
	(rule__Workflow__DependenciesAssignment_5)*
	{ after(grammarAccess.getWorkflowAccess().getDependenciesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
	'Task'
	{ after(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__1__Impl
	rule__Task__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNameAssignment_1()); }
	(rule__Task__NameAssignment_1)
	{ after(grammarAccess.getTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__2__Impl
	rule__Task__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__3__Impl
	rule__Task__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDescriptionAssignment_3()); }
	(rule__Task__DescriptionAssignment_3)
	{ after(grammarAccess.getTaskAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__4__Impl
	rule__Task__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getPriorityAssignment_4()); }
	(rule__Task__PriorityAssignment_4)
	{ after(grammarAccess.getTaskAccess().getPriorityAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__5__Impl
	rule__Task__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTypeAssignment_5()); }
	(rule__Task__TypeAssignment_5)
	{ after(grammarAccess.getTaskAccess().getTypeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getDependsOnKeyword_0()); }
	'dependsOn'
	{ after(grammarAccess.getDependencyAccess().getDependsOnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__1__Impl
	rule__Dependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getTaskAssignment_1()); }
	(rule__Dependency__TaskAssignment_1)
	{ after(grammarAccess.getDependencyAccess().getTaskAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__2__Impl
	rule__Dependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getOnKeyword_2()); }
	'on'
	{ after(grammarAccess.getDependencyAccess().getOnKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getTaskIdAssignment_3()); }
	(rule__Dependency__TaskIdAssignment_3)
	{ after(grammarAccess.getDependencyAccess().getTaskIdAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__WorkflowsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWorkflowsWorkflowParserRuleCall_0()); }
		ruleWorkflow
		{ after(grammarAccess.getModelAccess().getWorkflowsWorkflowParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWorkflowAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getWorkflowAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__TasksAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowAccess().getTasksTaskParserRuleCall_4_0()); }
		ruleTask
		{ after(grammarAccess.getWorkflowAccess().getTasksTaskParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__DependenciesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowAccess().getDependenciesDependencyParserRuleCall_5_0()); }
		ruleDependency
		{ after(grammarAccess.getWorkflowAccess().getDependenciesDependencyParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__PriorityAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getPriorityPriorityParserRuleCall_4_0()); }
		rulePriority
		{ after(grammarAccess.getTaskAccess().getPriorityPriorityParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__TypeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getTypeTaskTypeParserRuleCall_5_0()); }
		ruleTaskType
		{ after(grammarAccess.getTaskAccess().getTypeTaskTypeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__TaskAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getTaskIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDependencyAccess().getTaskIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__TaskIdAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getTaskIdIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDependencyAccess().getTaskIdIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__LOWAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityAccess().getLOWLowKeyword_0_0()); }
		(
			{ before(grammarAccess.getPriorityAccess().getLOWLowKeyword_0_0()); }
			'Low'
			{ after(grammarAccess.getPriorityAccess().getLOWLowKeyword_0_0()); }
		)
		{ after(grammarAccess.getPriorityAccess().getLOWLowKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__MEDIUMAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityAccess().getMEDIUMMediumKeyword_1_0()); }
		(
			{ before(grammarAccess.getPriorityAccess().getMEDIUMMediumKeyword_1_0()); }
			'Medium'
			{ after(grammarAccess.getPriorityAccess().getMEDIUMMediumKeyword_1_0()); }
		)
		{ after(grammarAccess.getPriorityAccess().getMEDIUMMediumKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__HIGHAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityAccess().getHIGHHighKeyword_2_0()); }
		(
			{ before(grammarAccess.getPriorityAccess().getHIGHHighKeyword_2_0()); }
			'High'
			{ after(grammarAccess.getPriorityAccess().getHIGHHighKeyword_2_0()); }
		)
		{ after(grammarAccess.getPriorityAccess().getHIGHHighKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskType__SIMPLEAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskTypeAccess().getSIMPLESimpleKeyword_0_0()); }
		(
			{ before(grammarAccess.getTaskTypeAccess().getSIMPLESimpleKeyword_0_0()); }
			'Simple'
			{ after(grammarAccess.getTaskTypeAccess().getSIMPLESimpleKeyword_0_0()); }
		)
		{ after(grammarAccess.getTaskTypeAccess().getSIMPLESimpleKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskType__COMPOUNDAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskTypeAccess().getCOMPOUNDCompoundKeyword_1_0()); }
		(
			{ before(grammarAccess.getTaskTypeAccess().getCOMPOUNDCompoundKeyword_1_0()); }
			'Compound'
			{ after(grammarAccess.getTaskTypeAccess().getCOMPOUNDCompoundKeyword_1_0()); }
		)
		{ after(grammarAccess.getTaskTypeAccess().getCOMPOUNDCompoundKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
