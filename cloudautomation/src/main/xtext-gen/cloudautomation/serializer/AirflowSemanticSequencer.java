/*
 * generated by Xtext 2.32.0
 */
package cloudautomation.serializer;

import cloudautomation.airflow.AirflowPackage;
import cloudautomation.airflow.Dependency;
import cloudautomation.airflow.Model;
import cloudautomation.airflow.Priority;
import cloudautomation.airflow.Task;
import cloudautomation.airflow.TaskType;
import cloudautomation.airflow.Workflow;
import cloudautomation.services.AirflowGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AirflowSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AirflowGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AirflowPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AirflowPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case AirflowPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AirflowPackage.PRIORITY:
				sequence_Priority(context, (Priority) semanticObject); 
				return; 
			case AirflowPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case AirflowPackage.TASK_TYPE:
				sequence_TaskType(context, (TaskType) semanticObject); 
				return; 
			case AirflowPackage.WORKFLOW:
				sequence_Workflow(context, (Workflow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (task=ID taskId=ID)
	 * </pre>
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirflowPackage.Literals.DEPENDENCY__TASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirflowPackage.Literals.DEPENDENCY__TASK));
			if (transientValues.isValueTransient(semanticObject, AirflowPackage.Literals.DEPENDENCY__TASK_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirflowPackage.Literals.DEPENDENCY__TASK_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDependencyAccess().getTaskIDTerminalRuleCall_1_0(), semanticObject.getTask());
		feeder.accept(grammarAccess.getDependencyAccess().getTaskIdIDTerminalRuleCall_3_0(), semanticObject.getTaskId());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     workflows+=Workflow+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Priority returns Priority
	 *
	 * Constraint:
	 *     (LOW='Low' | MEDIUM='Medium' | HIGH='High')
	 * </pre>
	 */
	protected void sequence_Priority(ISerializationContext context, Priority semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TaskType returns TaskType
	 *
	 * Constraint:
	 *     (SIMPLE='Simple' | COMPOUND='Compound')
	 * </pre>
	 */
	protected void sequence_TaskType(ISerializationContext context, TaskType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID description=STRING priority=Priority type=TaskType)
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirflowPackage.Literals.TASK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirflowPackage.Literals.TASK__NAME));
			if (transientValues.isValueTransient(semanticObject, AirflowPackage.Literals.TASK__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirflowPackage.Literals.TASK__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, AirflowPackage.Literals.TASK__PRIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirflowPackage.Literals.TASK__PRIORITY));
			if (transientValues.isValueTransient(semanticObject, AirflowPackage.Literals.TASK__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirflowPackage.Literals.TASK__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getTaskAccess().getPriorityPriorityParserRuleCall_4_0(), semanticObject.getPriority());
		feeder.accept(grammarAccess.getTaskAccess().getTypeTaskTypeParserRuleCall_5_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Workflow returns Workflow
	 *
	 * Constraint:
	 *     (name=ID description=STRING tasks+=Task* dependencies+=Dependency*)
	 * </pre>
	 */
	protected void sequence_Workflow(ISerializationContext context, Workflow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
