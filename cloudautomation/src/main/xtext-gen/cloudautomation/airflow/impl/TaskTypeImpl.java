/**
 * generated by Xtext 2.32.0
 */
package cloudautomation.airflow.impl;

import cloudautomation.airflow.AirflowPackage;
import cloudautomation.airflow.TaskType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cloudautomation.airflow.impl.TaskTypeImpl#getSIMPLE <em>SIMPLE</em>}</li>
 *   <li>{@link cloudautomation.airflow.impl.TaskTypeImpl#getCOMPOUND <em>COMPOUND</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskTypeImpl extends MinimalEObjectImpl.Container implements TaskType
{
  /**
   * The default value of the '{@link #getSIMPLE() <em>SIMPLE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIMPLE()
   * @generated
   * @ordered
   */
  protected static final String SIMPLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSIMPLE() <em>SIMPLE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIMPLE()
   * @generated
   * @ordered
   */
  protected String simple = SIMPLE_EDEFAULT;

  /**
   * The default value of the '{@link #getCOMPOUND() <em>COMPOUND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCOMPOUND()
   * @generated
   * @ordered
   */
  protected static final String COMPOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCOMPOUND() <em>COMPOUND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCOMPOUND()
   * @generated
   * @ordered
   */
  protected String compound = COMPOUND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirflowPackage.Literals.TASK_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSIMPLE()
  {
    return simple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSIMPLE(String newSIMPLE)
  {
    String oldSIMPLE = simple;
    simple = newSIMPLE;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirflowPackage.TASK_TYPE__SIMPLE, oldSIMPLE, simple));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCOMPOUND()
  {
    return compound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCOMPOUND(String newCOMPOUND)
  {
    String oldCOMPOUND = compound;
    compound = newCOMPOUND;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirflowPackage.TASK_TYPE__COMPOUND, oldCOMPOUND, compound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirflowPackage.TASK_TYPE__SIMPLE:
        return getSIMPLE();
      case AirflowPackage.TASK_TYPE__COMPOUND:
        return getCOMPOUND();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirflowPackage.TASK_TYPE__SIMPLE:
        setSIMPLE((String)newValue);
        return;
      case AirflowPackage.TASK_TYPE__COMPOUND:
        setCOMPOUND((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirflowPackage.TASK_TYPE__SIMPLE:
        setSIMPLE(SIMPLE_EDEFAULT);
        return;
      case AirflowPackage.TASK_TYPE__COMPOUND:
        setCOMPOUND(COMPOUND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirflowPackage.TASK_TYPE__SIMPLE:
        return SIMPLE_EDEFAULT == null ? simple != null : !SIMPLE_EDEFAULT.equals(simple);
      case AirflowPackage.TASK_TYPE__COMPOUND:
        return COMPOUND_EDEFAULT == null ? compound != null : !COMPOUND_EDEFAULT.equals(compound);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (SIMPLE: ");
    result.append(simple);
    result.append(", COMPOUND: ");
    result.append(compound);
    result.append(')');
    return result.toString();
  }

} //TaskTypeImpl
