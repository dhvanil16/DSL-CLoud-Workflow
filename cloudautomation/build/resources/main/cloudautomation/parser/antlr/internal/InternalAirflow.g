/*
 * generated by Xtext 2.32.0
 */
grammar InternalAirflow;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package cloudautomation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cloudautomation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cloudautomation.services.AirflowGrammarAccess;

}

@parser::members {

 	private AirflowGrammarAccess grammarAccess;

    public InternalAirflowParser(TokenStream input, AirflowGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AirflowGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getWorkflowsWorkflowParserRuleCall_0());
			}
			lv_workflows_0_0=ruleWorkflow
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"workflows",
					lv_workflows_0_0,
					"cloudautomation.Airflow.Workflow");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleWorkflow
entryRuleWorkflow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowRule()); }
	iv_ruleWorkflow=ruleWorkflow
	{ $current=$iv_ruleWorkflow.current; }
	EOF;

// Rule Workflow
ruleWorkflow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Workflow'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowAccess().getWorkflowKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkflowAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_description_3_0=RULE_STRING
				{
					newLeafNode(lv_description_3_0, grammarAccess.getWorkflowAccess().getDescriptionSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowAccess().getTasksTaskParserRuleCall_4_0());
				}
				lv_tasks_4_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowRule());
					}
					add(
						$current,
						"tasks",
						lv_tasks_4_0,
						"cloudautomation.Airflow.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowAccess().getDependenciesDependencyParserRuleCall_5_0());
				}
				lv_dependencies_5_0=ruleDependency
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowRule());
					}
					add(
						$current,
						"dependencies",
						lv_dependencies_5_0,
						"cloudautomation.Airflow.Dependency");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_description_3_0=RULE_STRING
				{
					newLeafNode(lv_description_3_0, grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getPriorityPriorityParserRuleCall_4_0());
				}
				lv_priority_4_0=rulePriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"priority",
						lv_priority_4_0,
						"cloudautomation.Airflow.Priority");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getTypeTaskTypeParserRuleCall_5_0());
				}
				lv_type_5_0=ruleTaskType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"type",
						lv_type_5_0,
						"cloudautomation.Airflow.TaskType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dependsOn'
		{
			newLeafNode(otherlv_0, grammarAccess.getDependencyAccess().getDependsOnKeyword_0());
		}
		(
			(
				lv_task_1_0=RULE_ID
				{
					newLeafNode(lv_task_1_0, grammarAccess.getDependencyAccess().getTaskIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDependencyRule());
					}
					setWithLastConsumed(
						$current,
						"task",
						lv_task_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='on'
		{
			newLeafNode(otherlv_2, grammarAccess.getDependencyAccess().getOnKeyword_2());
		}
		(
			(
				lv_taskId_3_0=RULE_ID
				{
					newLeafNode(lv_taskId_3_0, grammarAccess.getDependencyAccess().getTaskIdIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDependencyRule());
					}
					setWithLastConsumed(
						$current,
						"taskId",
						lv_taskId_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	iv_rulePriority=rulePriority
	{ $current=$iv_rulePriority.current; }
	EOF;

// Rule Priority
rulePriority returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_LOW_0_0='Low'
				{
					newLeafNode(lv_LOW_0_0, grammarAccess.getPriorityAccess().getLOWLowKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPriorityRule());
					}
					setWithLastConsumed($current, "LOW", lv_LOW_0_0, "Low");
				}
			)
		)
		    |
		(
			(
				lv_MEDIUM_1_0='Medium'
				{
					newLeafNode(lv_MEDIUM_1_0, grammarAccess.getPriorityAccess().getMEDIUMMediumKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPriorityRule());
					}
					setWithLastConsumed($current, "MEDIUM", lv_MEDIUM_1_0, "Medium");
				}
			)
		)
		    |
		(
			(
				lv_HIGH_2_0='High'
				{
					newLeafNode(lv_HIGH_2_0, grammarAccess.getPriorityAccess().getHIGHHighKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPriorityRule());
					}
					setWithLastConsumed($current, "HIGH", lv_HIGH_2_0, "High");
				}
			)
		)
	)
;

// Entry rule entryRuleTaskType
entryRuleTaskType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskTypeRule()); }
	iv_ruleTaskType=ruleTaskType
	{ $current=$iv_ruleTaskType.current; }
	EOF;

// Rule TaskType
ruleTaskType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_SIMPLE_0_0='Simple'
				{
					newLeafNode(lv_SIMPLE_0_0, grammarAccess.getTaskTypeAccess().getSIMPLESimpleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskTypeRule());
					}
					setWithLastConsumed($current, "SIMPLE", lv_SIMPLE_0_0, "Simple");
				}
			)
		)
		    |
		(
			(
				lv_COMPOUND_1_0='Compound'
				{
					newLeafNode(lv_COMPOUND_1_0, grammarAccess.getTaskTypeAccess().getCOMPOUNDCompoundKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskTypeRule());
					}
					setWithLastConsumed($current, "COMPOUND", lv_COMPOUND_1_0, "Compound");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
